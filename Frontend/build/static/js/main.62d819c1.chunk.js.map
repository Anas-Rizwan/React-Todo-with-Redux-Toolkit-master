{"version":3,"sources":["store/slices/UserSlice.js","components/TodoList.js","App.js","store/index.js","index.js"],"names":["todoSlice","createSlice","name","initialState","Todos","reducers","addItem","state","action","push","payload","deleteItem","filter","todo","id","editItem","map","elem","_objectSpread","text","completeItem","isComplete","_todoSlice$actions","actions","TodoList","dispatch","useDispatch","item","useSelector","todos","console","log","_useState","useState","_useState2","_slicedToArray","input","setInput","_useState3","_useState4","_useState5","_useState6","toggle","settoggle","_useState7","_useState8","edit","setedit","_useState9","_useState10","handleSubmit","e","preventDefault","Math","floor","random","alert","handleChange","target","value","React","createElement","Fragment","onSubmit","className","placeholder","onChange","onClick","key","style","cursor","RiCloseCircleLine","removeTodo","TiEdit","val","newItem","find","updateTodo","App","store","configureStore","reducer","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.62d819c1.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    Todos: []\r\n}\r\nconst todoSlice = createSlice({\r\n    name: \"todo\",\r\n    initialState,\r\n    reducers: {\r\n        addItem(state, action) {\r\n            state.Todos.push(action.payload)\r\n        },\r\n        deleteItem(state, action) {\r\n            state.Todos = state.Todos.filter((todo) => todo.id !== action.payload.id);\r\n        },\r\n\r\n        editItem(state, action) {\r\n            state.Todos = state.Todos.map((elem) => {\r\n                if (elem.id === action.payload.id) {\r\n                    return { ...state.Todos, text: action.payload.text }\r\n                }\r\n                return elem;\r\n            })\r\n        },\r\n        completeItem(state, action) {\r\n            // let todoArr = []\r\n            state.Todos = state.Todos.map(todo => {\r\n                if (todo.id === action.payload.id) {\r\n                    return { ...state.Todos, isComplete : true, text:action.payload.text  }\r\n                    \r\n                }\r\n                return todo;\r\n            })\r\n        }\r\n    }\r\n})\r\n\r\nexport default todoSlice.reducer;\r\nexport const { addItem, deleteItem, editItem, completeItem } = todoSlice.actions;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addItem, deleteItem, editItem, completeItem } from '../store/slices/UserSlice';\nimport { useSelector } from 'react-redux';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\n\nfunction TodoList() {\n\n  const dispatch = useDispatch()\n\n  const item = useSelector((state) => {\n    return state.todos.Todos\n  })\n  console.log(item);\n\n  const [input, setInput] = useState(\"\");\n  const [complete, setcomplete] = useState(false);\n  const [toggle, settoggle] = useState(false);\n  const [edit, setedit] = useState(null);\n  const [Completevalue, setCompletevalue] = useState({});\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!input) {\n      alert(\"Plz Fill The Field\")\n    }\n    else if (input && toggle) {\n      console.log(\"input\", input);\n\n      settoggle(false)\n\n      console.log(\"toggletttt\");\n      dispatch(editItem({\n        id: edit,\n        text: input,\n        isComplete: false,\n      }))\n    }\n\n    else {\n\n      dispatch(addItem({\n        id: Math.floor(Math.random() * 1000),\n        text: input,\n        isComplete: false,\n      }))\n      // )\n\n    }\n    setInput('');\n  };\n\n\n  const updateTodo = (val) => {\n    let newItem = item.find((elem) => {\n      return elem.id === val.id\n    })\n\n    setInput(newItem.text)\n    settoggle(true)\n    setedit(val.id)\n\n  };\n\n  const removeTodo = id => {\n    console.log(\"id\", id);\n    dispatch(deleteItem({ id: id }))\n\n  };\n\n  const completeTodo = value => {\n    dispatch(completeItem({\n      id: value.id,\n      text: value.text,\n    }))\n  };\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit} className='todo-form'>\n        {toggle ? (\n          <>\n            <h1>Update Plan for Today?</h1>\n            <input\n              placeholder='Update your item'\n              value={input}\n              onChange={handleChange}\n              name='text'\n\n              className='todo-input edit'\n            />\n            <button onClick={handleSubmit} className='todo-button edit'>\n              Update\n            </button>\n          </>\n        ) : (\n          <>\n            <h1>What's the Plan for Today?</h1>\n            <input\n              placeholder='Add a todo'\n              value={input}\n              onChange={handleChange}\n              name='text'\n              className='todo-input'\n\n            />\n            <button onClick={handleSubmit} className='todo-button'>\n              Add todo\n            </button>\n          </>\n        )}\n      </form>\n      {\n        item.map((todo, id) => (\n\n          <div\n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n            key={id}\n          >\n            <div key={todo.id} style={{ cursor: 'pointer' }} onClick={() => completeTodo(todo)}>\n              <h3>{todo.text}</h3>\n            </div>\n            {todo.isComplete ?\n              \"\" :\n              <div className='icons'>\n                <RiCloseCircleLine\n                  onClick={() => removeTodo(todo.id)}\n                  className='delete-icon'\n                />\n                <TiEdit\n                  onClick={() => updateTodo(todo)}\n                  className='edit-icon'\n                />\n              </div>\n            }\n          </div>\n        ))\n      }\n\n    </>\n  );\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport todoSlice from './slices/UserSlice'\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        todos: todoSlice,\r\n    },\r\n})\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}